2022-12-28 17:56:44,142 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]
CUDA available: False
GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.13.1+cpu
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1+cpu
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: not available
MMDetection: 2.26.0+
------------------------------------------------------------

2022-12-28 17:56:45,874 - mmdet - INFO - Distributed training: False
2022-12-28 17:56:47,482 - mmdet - INFO - Config:
dataset_type = 'opera.CocoPoseDataset'
data_root = './dataset/public/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='mmdet.LoadImageFromFile', to_float32=True),
    dict(
        type='opera.LoadAnnotations',
        with_bbox=True,
        with_keypoint=True,
        with_area=True),
    dict(
        type='mmdet.PhotoMetricDistortion',
        brightness_delta=32,
        contrast_range=(0.5, 1.5),
        saturation_range=(0.5, 1.5),
        hue_delta=18),
    dict(
        type='opera.KeypointRandomAffine',
        max_rotate_degree=30.0,
        max_translate_ratio=0.0,
        scaling_ratio_range=(1.0, 1.0),
        max_shear_degree=0.0,
        border_val=[103.53, 116.28, 123.675]),
    dict(type='opera.RandomFlip', flip_ratio=0.5),
    dict(
        type='mmdet.AutoAugment',
        policies=[[{
            'type': 'opera.Resize',
            'img_scale': [(400, 1400), (1400, 1400)],
            'multiscale_mode': 'range',
            'keep_ratio': True
        }],
                  [{
                      'type': 'opera.Resize',
                      'img_scale': [(400, 4200), (500, 4200), (600, 4200)],
                      'multiscale_mode': 'value',
                      'keep_ratio': True
                  }, {
                      'type': 'opera.RandomCrop',
                      'crop_type': 'absolute_range',
                      'crop_size': (384, 600),
                      'allow_negative_crop': True
                  }, {
                      'type': 'opera.Resize',
                      'img_scale': [(400, 1400), (1400, 1400)],
                      'multiscale_mode': 'range',
                      'override': True,
                      'keep_ratio': True
                  }]]),
    dict(
        type='mmdet.Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='mmdet.Pad', size_divisor=1),
    dict(
        type='opera.DefaultFormatBundle',
        extra_keys=['gt_keypoints', 'gt_areas']),
    dict(
        type='mmdet.Collect',
        keys=['img', 'gt_bboxes', 'gt_labels', 'gt_keypoints', 'gt_areas'])
]
test_pipeline = [
    dict(type='mmdet.LoadImageFromFile'),
    dict(
        type='mmdet.MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='mmdet.Resize', keep_ratio=True),
            dict(type='mmdet.RandomFlip'),
            dict(
                type='mmdet.Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='mmdet.Pad', size_divisor=1),
            dict(type='mmdet.ImageToTensor', keys=['img']),
            dict(type='mmdet.Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='opera.CocoPoseDataset',
        ann_file=
        './dataset/public/coco/annotations/person_keypoints_train2017.json',
        img_prefix='./dataset/public/coco/images/train2017/',
        pipeline=[
            dict(type='mmdet.LoadImageFromFile', to_float32=True),
            dict(
                type='opera.LoadAnnotations',
                with_bbox=True,
                with_keypoint=True,
                with_area=True),
            dict(
                type='mmdet.PhotoMetricDistortion',
                brightness_delta=32,
                contrast_range=(0.5, 1.5),
                saturation_range=(0.5, 1.5),
                hue_delta=18),
            dict(
                type='opera.KeypointRandomAffine',
                max_rotate_degree=30.0,
                max_translate_ratio=0.0,
                scaling_ratio_range=(1.0, 1.0),
                max_shear_degree=0.0,
                border_val=[103.53, 116.28, 123.675]),
            dict(type='opera.RandomFlip', flip_ratio=0.5),
            dict(
                type='mmdet.AutoAugment',
                policies=[[{
                    'type': 'opera.Resize',
                    'img_scale': [(400, 1400), (1400, 1400)],
                    'multiscale_mode': 'range',
                    'keep_ratio': True
                }],
                          [{
                              'type': 'opera.Resize',
                              'img_scale': [(400, 4200), (500, 4200),
                                            (600, 4200)],
                              'multiscale_mode': 'value',
                              'keep_ratio': True
                          }, {
                              'type': 'opera.RandomCrop',
                              'crop_type': 'absolute_range',
                              'crop_size': (384, 600),
                              'allow_negative_crop': True
                          }, {
                              'type': 'opera.Resize',
                              'img_scale': [(400, 1400), (1400, 1400)],
                              'multiscale_mode': 'range',
                              'override': True,
                              'keep_ratio': True
                          }]]),
            dict(
                type='mmdet.Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='mmdet.Pad', size_divisor=1),
            dict(
                type='opera.DefaultFormatBundle',
                extra_keys=['gt_keypoints', 'gt_areas']),
            dict(
                type='mmdet.Collect',
                keys=[
                    'img', 'gt_bboxes', 'gt_labels', 'gt_keypoints', 'gt_areas'
                ])
        ]),
    val=dict(
        type='opera.CocoPoseDataset',
        ann_file=
        './dataset/public/coco/annotations/person_keypoints_val2017.json',
        img_prefix='./dataset/public/coco/images/val2017/',
        pipeline=[
            dict(type='mmdet.LoadImageFromFile'),
            dict(
                type='mmdet.MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='mmdet.Resize', keep_ratio=True),
                    dict(type='mmdet.RandomFlip'),
                    dict(
                        type='mmdet.Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='mmdet.Pad', size_divisor=1),
                    dict(type='mmdet.ImageToTensor', keys=['img']),
                    dict(type='mmdet.Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='opera.CocoPoseDataset',
        ann_file=
        './dataset/public/coco/annotations/person_keypoints_val2017.json',
        img_prefix='./dataset/public/coco/images/val2017/',
        pipeline=[
            dict(type='mmdet.LoadImageFromFile'),
            dict(
                type='mmdet.MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='mmdet.Resize', keep_ratio=True),
                    dict(type='mmdet.RandomFlip'),
                    dict(
                        type='mmdet.Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='mmdet.Pad', size_divisor=1),
                    dict(type='mmdet.ImageToTensor', keys=['img']),
                    dict(type='mmdet.Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='keypoints')
checkpoint_config = dict(interval=1, max_keep_ckpts=20)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=1)
model = dict(
    type='opera.PETR',
    backbone=dict(
        type='mmdet.ResNet',
        depth=50,
        num_stages=4,
        out_indices=(1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='mmdet.ChannelMapper',
        in_channels=[512, 1024, 2048],
        kernel_size=1,
        out_channels=256,
        act_cfg=None,
        norm_cfg=dict(type='GN', num_groups=32),
        num_outs=4),
    bbox_head=dict(
        type='opera.PETRHead',
        num_query=300,
        num_classes=1,
        in_channels=2048,
        sync_cls_avg_factor=True,
        with_kpt_refine=True,
        as_two_stage=True,
        transformer=dict(
            type='opera.PETRTransformer',
            encoder=dict(
                type='mmcv.DetrTransformerEncoder',
                num_layers=6,
                transformerlayers=dict(
                    type='mmcv.BaseTransformerLayer',
                    attn_cfgs=dict(
                        type='mmcv.MultiScaleDeformableAttention',
                        embed_dims=256),
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),
            decoder=dict(
                type='opera.PetrTransformerDecoder',
                num_layers=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='mmcv.DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='mmcv.MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='opera.MultiScaleDeformablePoseAttention',
                            embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm'))),
            hm_encoder=dict(
                type='mmcv.DetrTransformerEncoder',
                num_layers=1,
                transformerlayers=dict(
                    type='mmcv.BaseTransformerLayer',
                    attn_cfgs=dict(
                        type='mmcv.MultiScaleDeformableAttention',
                        embed_dims=256,
                        num_levels=1),
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),
            refine_decoder=dict(
                type='mmcv.DeformableDetrTransformerDecoder',
                num_layers=2,
                return_intermediate=True,
                transformerlayers=dict(
                    type='mmcv.DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='mmcv.MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='mmcv.MultiScaleDeformableAttention',
                            embed_dims=256,
                            im2col_step=128)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='mmcv.SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='mmdet.FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_kpt=dict(type='mmdet.L1Loss', loss_weight=70.0),
        loss_kpt_rpn=dict(type='mmdet.L1Loss', loss_weight=70.0),
        loss_oks=dict(type='opera.OKSLoss', loss_weight=2.0),
        loss_hm=dict(type='opera.CenterFocalLoss', loss_weight=4.0),
        loss_kpt_refine=dict(type='mmdet.L1Loss', loss_weight=80.0),
        loss_oks_refine=dict(type='opera.OKSLoss', loss_weight=3.0)),
    train_cfg=dict(
        assigner=dict(
            type='opera.PoseHungarianAssigner',
            cls_cost=dict(type='mmdet.FocalLossCost', weight=2.0),
            kpt_cost=dict(type='opera.KptL1Cost', weight=70.0),
            oks_cost=dict(type='opera.OksCost', weight=7.0))),
    test_cfg=dict(max_per_img=10))
optimizer = dict(
    type='AdamW',
    lr=0.0002,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(lr_mult=0.1),
            sampling_offsets=dict(lr_mult=0.1),
            reference_points=dict(lr_mult=0.1))))
optimizer_config = dict(grad_clip=dict(max_norm=0.1, norm_type=2))
lr_config = dict(policy='step', step=[80])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = './work_dirs/petr_r50_16x2_100e_coco'
auto_resume = False
gpu_ids = [0]

2022-12-28 17:56:47,483 - mmdet - INFO - Set random seed to 313784968, deterministic: False
nitialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
oad model from: torchvision://resnet50
oad checkpoint from torchvision path: torchvision://resnet50
2022-12-28 17:56:48,209 - mmcv - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

nitialize ChannelMapper with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'

PretrainedInit: load from torchvision://resnet50 ======================================================
backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 

backbone.bn1.weight - torch.Size([64]): 

backbone.bn1.bias - torch.Size([64]): 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 

backbone.layer1.0.bn1.weight - torch.Size([64]): 

backbone.layer1.0.bn1.bias - torch.Size([64]): 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 

backbone.layer1.0.bn2.weight - torch.Size([64]): 

backbone.layer1.0.bn2.bias - torch.Size([64]): 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 

backbone.layer1.0.bn3.weight - torch.Size([256]): 

backbone.layer1.0.bn3.bias - torch.Size([256]): 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 

backbone.layer1.1.bn1.weight - torch.Size([64]): 

backbone.layer1.1.bn1.bias - torch.Size([64]): 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 

backbone.layer1.1.bn2.weight - torch.Size([64]): 

backbone.layer1.1.bn2.bias - torch.Size([64]): 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 

backbone.layer1.1.bn3.weight - torch.Size([256]): 

backbone.layer1.1.bn3.bias - torch.Size([256]): 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 

backbone.layer1.2.bn1.weight - torch.Size([64]): 

backbone.layer1.2.bn1.bias - torch.Size([64]): 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 

backbone.layer1.2.bn2.weight - torch.Size([64]): 

backbone.layer1.2.bn2.bias - torch.Size([64]): 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 

backbone.layer1.2.bn3.weight - torch.Size([256]): 

backbone.layer1.2.bn3.bias - torch.Size([256]): 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 

backbone.layer2.0.bn1.weight - torch.Size([128]): 

backbone.layer2.0.bn1.bias - torch.Size([128]): 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 

backbone.layer2.0.bn2.weight - torch.Size([128]): 

backbone.layer2.0.bn2.bias - torch.Size([128]): 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 

backbone.layer2.0.bn3.weight - torch.Size([512]): 

backbone.layer2.0.bn3.bias - torch.Size([512]): 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 

backbone.layer2.1.bn1.weight - torch.Size([128]): 

backbone.layer2.1.bn1.bias - torch.Size([128]): 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 

backbone.layer2.1.bn2.weight - torch.Size([128]): 

backbone.layer2.1.bn2.bias - torch.Size([128]): 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 

backbone.layer2.1.bn3.weight - torch.Size([512]): 

backbone.layer2.1.bn3.bias - torch.Size([512]): 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 

backbone.layer2.2.bn1.weight - torch.Size([128]): 

backbone.layer2.2.bn1.bias - torch.Size([128]): 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 

backbone.layer2.2.bn2.weight - torch.Size([128]): 

backbone.layer2.2.bn2.bias - torch.Size([128]): 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 

backbone.layer2.2.bn3.weight - torch.Size([512]): 

backbone.layer2.2.bn3.bias - torch.Size([512]): 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 

backbone.layer2.3.bn1.weight - torch.Size([128]): 

backbone.layer2.3.bn1.bias - torch.Size([128]): 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 

backbone.layer2.3.bn2.weight - torch.Size([128]): 

backbone.layer2.3.bn2.bias - torch.Size([128]): 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 

backbone.layer2.3.bn3.weight - torch.Size([512]): 

backbone.layer2.3.bn3.bias - torch.Size([512]): 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 

backbone.layer3.0.bn1.weight - torch.Size([256]): 

backbone.layer3.0.bn1.bias - torch.Size([256]): 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.0.bn2.weight - torch.Size([256]): 

backbone.layer3.0.bn2.bias - torch.Size([256]): 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 

backbone.layer3.1.bn1.weight - torch.Size([256]): 

backbone.layer3.1.bn1.bias - torch.Size([256]): 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.1.bn2.weight - torch.Size([256]): 

backbone.layer3.1.bn2.bias - torch.Size([256]): 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 

backbone.layer3.2.bn1.weight - torch.Size([256]): 

backbone.layer3.2.bn1.bias - torch.Size([256]): 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.2.bn2.weight - torch.Size([256]): 

backbone.layer3.2.bn2.bias - torch.Size([256]): 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 

backbone.layer3.3.bn1.weight - torch.Size([256]): 

backbone.layer3.3.bn1.bias - torch.Size([256]): 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.3.bn2.weight - torch.Size([256]): 

backbone.layer3.3.bn2.bias - torch.Size([256]): 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 

backbone.layer3.4.bn1.weight - torch.Size([256]): 

backbone.layer3.4.bn1.bias - torch.Size([256]): 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.4.bn2.weight - torch.Size([256]): 

backbone.layer3.4.bn2.bias - torch.Size([256]): 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 

backbone.layer3.5.bn1.weight - torch.Size([256]): 

backbone.layer3.5.bn1.bias - torch.Size([256]): 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 

backbone.layer3.5.bn2.weight - torch.Size([256]): 

backbone.layer3.5.bn2.bias - torch.Size([256]): 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 

backbone.layer4.0.bn1.weight - torch.Size([512]): 

backbone.layer4.0.bn1.bias - torch.Size([512]): 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 

backbone.layer4.0.bn2.weight - torch.Size([512]): 

backbone.layer4.0.bn2.bias - torch.Size([512]): 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 

backbone.layer4.1.bn1.weight - torch.Size([512]): 

backbone.layer4.1.bn1.bias - torch.Size([512]): 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 

backbone.layer4.1.bn2.weight - torch.Size([512]): 

backbone.layer4.1.bn2.bias - torch.Size([512]): 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 

backbone.layer4.2.bn1.weight - torch.Size([512]): 

backbone.layer4.2.bn1.bias - torch.Size([512]): 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 

backbone.layer4.2.bn2.weight - torch.Size([512]): 

backbone.layer4.2.bn2.bias - torch.Size([512]): 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
 
neck.convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
neck.convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
neck.convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
neck.convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.extra_convs.0.conv.weight - torch.Size([256, 2048, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 
 
neck.extra_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
neck.extra_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.0.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.0.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.1.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.1.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.2.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.2.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.3.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.3.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.4.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.4.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.5.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.5.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.encoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([1088, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([1088]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([544, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([544]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([1088, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([1088]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([544, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([544]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([1088, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([1088]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([544, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([544]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.enc_output.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.enc_output.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.enc_output_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.enc_output_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_query_embedding.weight - torch.Size([17, 512]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.hm_encoder.layers.0.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.hm_encoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.hm_encoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.hm_encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.transformer.refine_decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.transformer.refine_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.cls_branches.0.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.cls_branches.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.cls_branches.1.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.cls_branches.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.cls_branches.2.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.cls_branches.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.cls_branches.3.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.cls_branches.3.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.0.0.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.4.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.0.6.weight - torch.Size([34, 512]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.0.6.bias - torch.Size([34]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.1.0.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.4.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.1.6.weight - torch.Size([34, 512]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.1.6.bias - torch.Size([34]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.2.0.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.4.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.2.6.weight - torch.Size([34, 512]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.2.6.bias - torch.Size([34]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.3.0.weight - torch.Size([512, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.4.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.kpt_branches.3.6.weight - torch.Size([34, 512]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.kpt_branches.3.6.bias - torch.Size([34]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.query_embedding.weight - torch.Size([300, 512]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.0.4.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.refine_kpt_branches.0.4.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.refine_kpt_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of PETR  
 
bbox_head.refine_kpt_branches.1.4.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.refine_kpt_branches.1.4.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.fc_hm.weight - torch.Size([17, 256]): 
Initialized by user-defined `init_weights` in PETRHead  
 
bbox_head.fc_hm.bias - torch.Size([17]): 
Initialized by user-defined `init_weights` in PETRHead  
 
loading annotations into memory...
Done (t=8.62s)
creating index...
index created!
fatal: not a git repository (or any of the parent directories): .git
2022-12-28 17:56:58,208 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
2022-12-28 17:56:58,565 - mmdet - INFO - Start running, host: eungi@eungi-linux, work_dir: /home/eungi/opera/work_dirs/petr_r50_16x2_100e_coco
2022-12-28 17:56:58,565 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-12-28 17:56:58,566 - mmdet - INFO - workflow: [('train', 1)], max: 100 epochs
2022-12-28 17:56:58,567 - mmdet - INFO - Checkpoints will be saved to /home/eungi/opera/work_dirs/petr_r50_16x2_100e_coco by HardDiskBackend.
img: torch.Size([2, 3, 925, 1386])
